-----------------------------------------------------------------------
--  Babel.Base.Models -- Babel.Base.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2014 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
package body Babel.Base.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;

   function Store_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Key;

   function Store_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => STORE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Store_Key;

   function "=" (Left, Right : Store_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Store_Ref'Class;
                        Impl   : out Store_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Store_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Store_Ref) is
      Impl : Store_Access;
   begin
      Impl := new Store_Impl;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Store
   -- ----------------------------------------

   procedure Set_Id (Object : in out Store_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Store_Ref)
                  return ADO.Identifier is
      Impl : constant Store_Access
         := Store_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Store_Ref;
                        Value : in String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Store_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Store_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Store_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Store_Access
         := Store_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Parameter (Object : in out Store_Ref;
                             Value : in String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Parameter, Value);
   end Set_Parameter;

   procedure Set_Parameter (Object : in out Store_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Parameter, Value);
   end Set_Parameter;

   function Get_Parameter (Object : in Store_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Parameter);
   end Get_Parameter;
   function Get_Parameter (Object : in Store_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Store_Access
         := Store_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Parameter;
   end Get_Parameter;


   procedure Set_Server (Object : in out Store_Ref;
                          Value : in String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Server, Value);
   end Set_Server;

   procedure Set_Server (Object : in out Store_Ref;
                         Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Store_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Server, Value);
   end Set_Server;

   function Get_Server (Object : in Store_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Server);
   end Get_Server;
   function Get_Server (Object : in Store_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Store_Access
         := Store_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Server;
   end Get_Server;

   --  Copy of the object.
   procedure Copy (Object : in Store_Ref;
                   Into   : in out Store_Ref) is
      Result : Store_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Store_Access
              := Store_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Store_Access
              := new Store_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Parameter := Impl.Parameter;
            Copy.Server := Impl.Server;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Store_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Store_Access := new Store_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Store_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Store_Access := new Store_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Store_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Store_Access := new Store_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Store_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Store_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Store_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Store_Impl) is
      type Store_Impl_Ptr is access all Store_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Store_Impl, Store_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Store_Impl_Ptr := Store_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Store_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, STORE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Store_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Store_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (STORE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  parameter
                          Value => Object.Parameter);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  server
                          Value => Object.Server);
         Object.Clear_Modified (4);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Store_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (STORE_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_1_NAME, --  parameter
                        Value => Object.Parameter);
      Query.Save_Field (Name  => COL_3_1_NAME, --  server
                        Value => Object.Server);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Store_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (STORE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Store_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Store_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Store_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "parameter" then
         return Util.Beans.Objects.To_Object (Impl.Parameter);
      elsif Name = "server" then
         return Util.Beans.Objects.To_Object (Impl.Server);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Store_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
      pragma Unreferenced (Session);
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      Object.Parameter := Stmt.Get_Unbounded_String (2);
      Object.Server := Stmt.Get_Unbounded_String (3);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Backup_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => BACKUP_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Backup_Key;

   function Backup_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => BACKUP_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Backup_Key;

   function "=" (Left, Right : Backup_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Backup_Ref'Class;
                        Impl   : out Backup_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Backup_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Backup_Ref) is
      Impl : Backup_Access;
   begin
      Impl := new Backup_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Backup
   -- ----------------------------------------

   procedure Set_Id (Object : in out Backup_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Backup_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Backup_Ref)
                  return ADO.Identifier is
      Impl : constant Backup_Access
         := Backup_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Create_Date (Object : in out Backup_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Backup_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Backup_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Backup_Access
         := Backup_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Store (Object : in out Backup_Ref;
                        Value  : in Babel.Base.Models.Store_Ref'Class) is
      Impl : Backup_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 3, Impl.Store, Value);
   end Set_Store;

   function Get_Store (Object : in Backup_Ref)
                  return Babel.Base.Models.Store_Ref'Class is
      Impl : constant Backup_Access
         := Backup_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Store;
   end Get_Store;

   --  Copy of the object.
   procedure Copy (Object : in Backup_Ref;
                   Into   : in out Backup_Ref) is
      Result : Backup_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Backup_Access
              := Backup_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Backup_Access
              := new Backup_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Store := Impl.Store;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Backup_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Backup_Access := new Backup_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Backup_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Backup_Access := new Backup_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Backup_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Backup_Access := new Backup_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Backup_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Backup_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Backup_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Backup_Impl) is
      type Backup_Impl_Ptr is access all Backup_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Backup_Impl, Backup_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Backup_Impl_Ptr := Backup_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Backup_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, BACKUP_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Backup_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Backup_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (BACKUP_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  store_id
                          Value => Object.Store);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Backup_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (BACKUP_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_2_2_NAME, --  store_id
                        Value => Object.Store);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Backup_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (BACKUP_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Backup_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Backup_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Backup_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Backup_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (1);
      if not Stmt.Is_Null (2) then
         Object.Store.Set_Key_Value (Stmt.Get_Identifier (2), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;
   function FileSet_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => FILESET_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end FileSet_Key;

   function FileSet_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => FILESET_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end FileSet_Key;

   function "=" (Left, Right : FileSet_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Fileset_Ref'Class;
                        Impl   : out Fileset_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Fileset_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Fileset_Ref) is
      Impl : Fileset_Access;
   begin
      Impl := new Fileset_Impl;
      Impl.First_Id := ADO.NO_IDENTIFIER;
      Impl.Last_Id := ADO.NO_IDENTIFIER;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Fileset
   -- ----------------------------------------

   procedure Set_Id (Object : in out Fileset_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Fileset_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Fileset_Ref)
                  return ADO.Identifier is
      Impl : constant Fileset_Access
         := Fileset_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_First_Id (Object : in out Fileset_Ref;
                           Value  : in ADO.Identifier) is
      Impl : Fileset_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 2, Impl.First_Id, Value);
   end Set_First_Id;

   function Get_First_Id (Object : in Fileset_Ref)
                  return ADO.Identifier is
      Impl : constant Fileset_Access
         := Fileset_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.First_Id;
   end Get_First_Id;


   procedure Set_Last_Id (Object : in out Fileset_Ref;
                          Value  : in ADO.Identifier) is
      Impl : Fileset_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 3, Impl.Last_Id, Value);
   end Set_Last_Id;

   function Get_Last_Id (Object : in Fileset_Ref)
                  return ADO.Identifier is
      Impl : constant Fileset_Access
         := Fileset_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Id;
   end Get_Last_Id;


   procedure Set_Backup (Object : in out Fileset_Ref;
                         Value  : in Babel.Base.Models.Backup_Ref'Class) is
      Impl : Fileset_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 4, Impl.Backup, Value);
   end Set_Backup;

   function Get_Backup (Object : in Fileset_Ref)
                  return Babel.Base.Models.Backup_Ref'Class is
      Impl : constant Fileset_Access
         := Fileset_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Backup;
   end Get_Backup;

   --  Copy of the object.
   procedure Copy (Object : in Fileset_Ref;
                   Into   : in out Fileset_Ref) is
      Result : Fileset_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Fileset_Access
              := Fileset_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Fileset_Access
              := new Fileset_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.First_Id := Impl.First_Id;
            Copy.Last_Id := Impl.Last_Id;
            Copy.Backup := Impl.Backup;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Fileset_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Fileset_Access := new Fileset_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Fileset_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Fileset_Access := new Fileset_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Fileset_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Fileset_Access := new Fileset_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Fileset_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Fileset_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Fileset_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Fileset_Impl) is
      type Fileset_Impl_Ptr is access all Fileset_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Fileset_Impl, Fileset_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Fileset_Impl_Ptr := Fileset_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Fileset_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, FILESET_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Fileset_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Fileset_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (FILESET_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_3_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_3_NAME, --  first_id
                          Value => Object.First_Id);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_3_NAME, --  last_id
                          Value => Object.Last_Id);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_3_NAME, --  backup_id
                          Value => Object.Backup);
         Object.Clear_Modified (4);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Fileset_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (FILESET_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_3_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_3_NAME, --  first_id
                        Value => Object.First_Id);
      Query.Save_Field (Name  => COL_2_3_NAME, --  last_id
                        Value => Object.Last_Id);
      Query.Save_Field (Name  => COL_3_3_NAME, --  backup_id
                        Value => Object.Backup);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Fileset_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (FILESET_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Fileset_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Fileset_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Fileset_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "first_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.First_Id));
      elsif Name = "last_id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Last_Id));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Fileset_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.First_Id := Stmt.Get_Identifier (1);
      Object.Last_Id := Stmt.Get_Identifier (2);
      if not Stmt.Is_Null (3) then
         Object.Backup.Set_Key_Value (Stmt.Get_Identifier (3), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;
   function Path_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => PATH_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Path_Key;

   function Path_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => PATH_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Path_Key;

   function "=" (Left, Right : Path_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Path_Ref'Class;
                        Impl   : out Path_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Path_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Path_Ref) is
      Impl : Path_Access;
   begin
      Impl := new Path_Impl;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Path
   -- ----------------------------------------

   procedure Set_Id (Object : in out Path_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Path_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Path_Ref)
                  return ADO.Identifier is
      Impl : constant Path_Access
         := Path_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Name (Object : in out Path_Ref;
                        Value : in String) is
      Impl : Path_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Path_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Path_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 2, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Path_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Path_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Path_Access
         := Path_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Store (Object : in out Path_Ref;
                        Value  : in Babel.Base.Models.Store_Ref'Class) is
      Impl : Path_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 3, Impl.Store, Value);
   end Set_Store;

   function Get_Store (Object : in Path_Ref)
                  return Babel.Base.Models.Store_Ref'Class is
      Impl : constant Path_Access
         := Path_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Store;
   end Get_Store;

   --  Copy of the object.
   procedure Copy (Object : in Path_Ref;
                   Into   : in out Path_Ref) is
      Result : Path_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Path_Access
              := Path_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Path_Access
              := new Path_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Name := Impl.Name;
            Copy.Store := Impl.Store;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Path_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Path_Access := new Path_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Path_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Path_Access := new Path_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Path_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Path_Access := new Path_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Path_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Path_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Path_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Path_Impl) is
      type Path_Impl_Ptr is access all Path_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Path_Impl, Path_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Path_Impl_Ptr := Path_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Path_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, PATH_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Path_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Path_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (PATH_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_4_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_4_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_4_NAME, --  store_id
                          Value => Object.Store);
         Object.Clear_Modified (3);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Path_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (PATH_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_4_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_4_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_2_4_NAME, --  store_id
                        Value => Object.Store);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Path_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (PATH_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in Path_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access Path_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := Path_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Path_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (1);
      if not Stmt.Is_Null (2) then
         Object.Store.Set_Key_Value (Stmt.Get_Identifier (2), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;
   function File_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => FILE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end File_Key;

   function File_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => FILE_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end File_Key;

   function "=" (Left, Right : File_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out File_Ref'Class;
                        Impl   : out File_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := File_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out File_Ref) is
      Impl : File_Access;
   begin
      Impl := new File_Impl;
      Impl.Size := 0;
      Impl.Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: File
   -- ----------------------------------------

   procedure Set_Id (Object : in out File_Ref;
                     Value  : in ADO.Identifier) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in File_Ref)
                  return ADO.Identifier is
      Impl : constant File_Access
         := File_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Size (Object : in out File_Ref;
                       Value  : in Integer) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 2, Impl.Size, Value);
   end Set_Size;

   function Get_Size (Object : in File_Ref)
                  return Integer is
      Impl : constant File_Access
         := File_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Size;
   end Get_Size;


   procedure Set_Date (Object : in out File_Ref;
                       Value  : in Ada.Calendar.Time) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 3, Impl.Date, Value);
   end Set_Date;

   function Get_Date (Object : in File_Ref)
                  return Ada.Calendar.Time is
      Impl : constant File_Access
         := File_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Date;
   end Get_Date;


   procedure Set_Sha1 (Object : in out File_Ref;
                       Value  : in ADO.Blob_Ref) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Blob (Impl.all, 4, Impl.Sha1, Value);
   end Set_Sha1;

   function Get_Sha1 (Object : in File_Ref)
                  return ADO.Blob_Ref is
      Impl : constant File_Access
         := File_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Sha1;
   end Get_Sha1;


   procedure Set_Directory (Object : in out File_Ref;
                            Value  : in Babel.Base.Models.Path_Ref'Class) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 5, Impl.Directory, Value);
   end Set_Directory;

   function Get_Directory (Object : in File_Ref)
                  return Babel.Base.Models.Path_Ref'Class is
      Impl : constant File_Access
         := File_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Directory;
   end Get_Directory;


   procedure Set_Name (Object : in out File_Ref;
                       Value  : in Babel.Base.Models.Path_Ref'Class) is
      Impl : File_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 6, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in File_Ref)
                  return Babel.Base.Models.Path_Ref'Class is
      Impl : constant File_Access
         := File_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;

   --  Copy of the object.
   procedure Copy (Object : in File_Ref;
                   Into   : in out File_Ref) is
      Result : File_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant File_Access
              := File_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant File_Access
              := new File_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Size := Impl.Size;
            Copy.Date := Impl.Date;
            Copy.Sha1 := Impl.Sha1;
            Copy.Directory := Impl.Directory;
            Copy.Name := Impl.Name;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out File_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant File_Access := new File_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out File_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant File_Access := new File_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out File_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant File_Access := new File_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out File_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new File_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out File_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access File_Impl) is
      type File_Impl_Ptr is access all File_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (File_Impl, File_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : File_Impl_Ptr := File_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out File_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, FILE_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out File_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out File_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (FILE_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_5_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_5_NAME, --  size
                          Value => Object.Size);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_5_NAME, --  date
                          Value => Object.Date);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_5_NAME, --  sha1
                          Value => Object.Sha1);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_5_NAME, --  directory_id
                          Value => Object.Directory);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_5_NAME, --  name_id
                          Value => Object.Name);
         Object.Clear_Modified (6);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out File_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (FILE_DEF'Access);
      Result : Integer;
   begin
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_5_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_5_NAME, --  size
                        Value => Object.Size);
      Query.Save_Field (Name  => COL_2_5_NAME, --  date
                        Value => Object.Date);
      Query.Save_Field (Name  => COL_3_5_NAME, --  sha1
                        Value => Object.Sha1);
      Query.Save_Field (Name  => COL_4_5_NAME, --  directory_id
                        Value => Object.Directory);
      Query.Save_Field (Name  => COL_5_5_NAME, --  name_id
                        Value => Object.Name);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out File_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (FILE_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   function Get_Value (From : in File_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : constant ADO.Objects.Object_Record_Access := From.Get_Load_Object;
      Impl : access File_Impl;
   begin
      if Obj = null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Impl := File_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Size));
      elsif Name = "date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Date);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out File_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Size := Stmt.Get_Integer (1);
      Object.Date := Stmt.Get_Time (2);
      Object.Sha1 := Stmt.Get_Blob (3);
      if not Stmt.Is_Null (4) then
         Object.Directory.Set_Key_Value (Stmt.Get_Identifier (4), Session);
      end if;
      if not Stmt.Is_Null (5) then
         Object.Name.Set_Key_Value (Stmt.Get_Identifier (5), Session);
      end if;
      ADO.Objects.Set_Created (Object);
   end Load;


end Babel.Base.Models;
